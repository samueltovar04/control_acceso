{"remainingRequest":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\rxjs\\ReplaySubject.js","dependencies":[{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\rxjs\\ReplaySubject.js","mtime":499162500000},{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\r\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\r\nvar Subject_1 = require('./Subject');\r\nvar queue_1 = require('./scheduler/queue');\r\nvar Subscription_1 = require('./Subscription');\r\nvar observeOn_1 = require('./operators/observeOn');\r\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\r\nvar SubjectSubscription_1 = require('./SubjectSubscription');\r\n/**\r\n * @class ReplaySubject<T>\r\n */\r\nvar ReplaySubject = /*@__PURE__*/ (function (_super) {\r\n    __extends(ReplaySubject, _super);\r\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\r\n        if (bufferSize === void 0) {\r\n            bufferSize = Number.POSITIVE_INFINITY;\r\n        }\r\n        if (windowTime === void 0) {\r\n            windowTime = Number.POSITIVE_INFINITY;\r\n        }\r\n        _super.call(this);\r\n        this.scheduler = scheduler;\r\n        this._events = [];\r\n        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\r\n        this._windowTime = windowTime < 1 ? 1 : windowTime;\r\n    }\r\n    ReplaySubject.prototype.next = function (value) {\r\n        var now = this._getNow();\r\n        this._events.push(new ReplayEvent(now, value));\r\n        this._trimBufferThenGetEvents();\r\n        _super.prototype.next.call(this, value);\r\n    };\r\n    /** @deprecated internal use only */ ReplaySubject.prototype._subscribe = function (subscriber) {\r\n        var _events = this._trimBufferThenGetEvents();\r\n        var scheduler = this.scheduler;\r\n        var subscription;\r\n        if (this.closed) {\r\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\r\n        }\r\n        else if (this.hasError) {\r\n            subscription = Subscription_1.Subscription.EMPTY;\r\n        }\r\n        else if (this.isStopped) {\r\n            subscription = Subscription_1.Subscription.EMPTY;\r\n        }\r\n        else {\r\n            this.observers.push(subscriber);\r\n            subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);\r\n        }\r\n        if (scheduler) {\r\n            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));\r\n        }\r\n        var len = _events.length;\r\n        for (var i = 0; i < len && !subscriber.closed; i++) {\r\n            subscriber.next(_events[i].value);\r\n        }\r\n        if (this.hasError) {\r\n            subscriber.error(this.thrownError);\r\n        }\r\n        else if (this.isStopped) {\r\n            subscriber.complete();\r\n        }\r\n        return subscription;\r\n    };\r\n    ReplaySubject.prototype._getNow = function () {\r\n        return (this.scheduler || queue_1.queue).now();\r\n    };\r\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\r\n        var now = this._getNow();\r\n        var _bufferSize = this._bufferSize;\r\n        var _windowTime = this._windowTime;\r\n        var _events = this._events;\r\n        var eventsCount = _events.length;\r\n        var spliceCount = 0;\r\n        // Trim events that fall out of the time window.\r\n        // Start at the front of the list. Break early once\r\n        // we encounter an event that falls within the window.\r\n        while (spliceCount < eventsCount) {\r\n            if ((now - _events[spliceCount].time) < _windowTime) {\r\n                break;\r\n            }\r\n            spliceCount++;\r\n        }\r\n        if (eventsCount > _bufferSize) {\r\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\r\n        }\r\n        if (spliceCount > 0) {\r\n            _events.splice(0, spliceCount);\r\n        }\r\n        return _events;\r\n    };\r\n    return ReplaySubject;\r\n}(Subject_1.Subject));\r\nexports.ReplaySubject = ReplaySubject;\r\nvar ReplayEvent = /*@__PURE__*/ (function () {\r\n    function ReplayEvent(time, value) {\r\n        this.time = time;\r\n        this.value = value;\r\n    }\r\n    return ReplayEvent;\r\n}());\r\n",null]}
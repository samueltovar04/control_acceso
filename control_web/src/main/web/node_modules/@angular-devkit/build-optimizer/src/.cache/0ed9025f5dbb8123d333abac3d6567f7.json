{"remainingRequest":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\@agm\\core\\services\\managers\\transit-layer-manager.js","dependencies":[{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\@agm\\core\\services\\managers\\transit-layer-manager.js","mtime":499162500000},{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';\n/**\n * This class manages a Transit Layer for a Google Map instance.\n */\nvar TransitLayerManager = /*@__PURE__*/ (function () {\n    function TransitLayerManager(_wrapper) {\n        this._wrapper = _wrapper;\n        this._layers = new Map();\n    }\n    /**\n     * Adds a transit layer to a map and local layer manager\n     * @param {AgmTransitLayer} layer - a transitLayer object\n     * @param {TransitLayerOptions} options - TransitLayerOptions options\n     * @returns void\n     */\n    TransitLayerManager.prototype.addTransitLayer = function (layer, options) {\n        var newLayer = this._wrapper.createTransitLayer(options);\n        this._layers.set(layer, newLayer);\n    };\n    /**\n     * Sets layer options\n     * @param {AgmTransitLayer} transitLayer object\n     * @param {options} TransitLayerOptions\n     * @returns Promise<void>\n     */\n    TransitLayerManager.prototype.setOptions = function (layer, options) {\n        return this.toggleTransitLayerVisibility(layer, options);\n    };\n    /**\n     * Deletes a transit layer\n     * @param {AgmTransitLayer} layer - the transit layer to delete\n     * @returns  Promise<void>\n     */\n    TransitLayerManager.prototype.deleteTransitLayer = function (layer) {\n        var _this = this;\n        return this._layers.get(layer).then(function (currentLayer) {\n            currentLayer.setMap(null);\n            _this._layers.delete(layer);\n        });\n    };\n    /**\n     * Hide/Show a Google Map transit layer\n     * @param {AgmTransitLayer} transitLayer object\n     * @param {options} TransitLayerOptions\n     * @returns Promise<void>\n     */\n    TransitLayerManager.prototype.toggleTransitLayerVisibility = function (layer, options) {\n        var _this = this;\n        return this._layers.get(layer).then(function (currentLayer) {\n            if (!options.visible) {\n                currentLayer.setMap(null);\n                return Promise.resolve();\n            }\n            else {\n                return _this._wrapper.getNativeMap().then(function (map) {\n                    currentLayer.setMap(map);\n                });\n            }\n        });\n    };\n    return TransitLayerManager;\n}());\nexport { TransitLayerManager };\n//# sourceMappingURL=transit-layer-manager.js.map \n",null]}
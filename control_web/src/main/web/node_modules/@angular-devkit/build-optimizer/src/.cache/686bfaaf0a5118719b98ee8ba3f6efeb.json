{"remainingRequest":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\rxjs\\operators\\ignoreElements.js","dependencies":[{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\rxjs\\operators\\ignoreElements.js","mtime":499162500000},{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\r\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\r\nvar Subscriber_1 = require('../Subscriber');\r\nvar noop_1 = require('../util/noop');\r\n/**\r\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\r\n *\r\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\r\n *\r\n * @return {Observable} An empty Observable that only calls `complete`\r\n * or `error`, based on which one is called by the source Observable.\r\n * @method ignoreElements\r\n * @owner Observable\r\n */\r\nfunction ignoreElements() {\r\n    return function ignoreElementsOperatorFunction(source) {\r\n        return source.lift(new IgnoreElementsOperator());\r\n    };\r\n}\r\nexports.ignoreElements = ignoreElements;\r\nvar IgnoreElementsOperator = /*@__PURE__*/ (function () {\r\n    function IgnoreElementsOperator() {\r\n    }\r\n    IgnoreElementsOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new IgnoreElementsSubscriber(subscriber));\r\n    };\r\n    return IgnoreElementsOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar IgnoreElementsSubscriber = /*@__PURE__*/ (function (_super) {\r\n    __extends(IgnoreElementsSubscriber, _super);\r\n    function IgnoreElementsSubscriber() {\r\n        _super.apply(this, arguments);\r\n    }\r\n    IgnoreElementsSubscriber.prototype._next = function (unused) {\r\n        noop_1.noop();\r\n    };\r\n    return IgnoreElementsSubscriber;\r\n}(Subscriber_1.Subscriber));\r\n",null]}
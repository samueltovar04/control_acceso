{"remainingRequest":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\rxjs\\operators\\finalize.js","dependencies":[{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\rxjs\\operators\\finalize.js","mtime":499162500000},{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\r\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\r\nvar Subscriber_1 = require('../Subscriber');\r\nvar Subscription_1 = require('../Subscription');\r\n/**\r\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\r\n * the source terminates on complete or error.\r\n * @param {function} callback Function to be called when source terminates.\r\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\r\n * @method finally\r\n * @owner Observable\r\n */\r\nfunction finalize(callback) {\r\n    return function (source) { return source.lift(new FinallyOperator(callback)); };\r\n}\r\nexports.finalize = finalize;\r\nvar FinallyOperator = /*@__PURE__*/ (function () {\r\n    function FinallyOperator(callback) {\r\n        this.callback = callback;\r\n    }\r\n    FinallyOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new FinallySubscriber(subscriber, this.callback));\r\n    };\r\n    return FinallyOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar FinallySubscriber = /*@__PURE__*/ (function (_super) {\r\n    __extends(FinallySubscriber, _super);\r\n    function FinallySubscriber(destination, callback) {\r\n        _super.call(this, destination);\r\n        this.add(new Subscription_1.Subscription(callback));\r\n    }\r\n    return FinallySubscriber;\r\n}(Subscriber_1.Subscriber));\r\n",null]}
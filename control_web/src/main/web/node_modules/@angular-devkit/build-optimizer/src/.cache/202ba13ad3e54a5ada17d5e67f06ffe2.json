{"remainingRequest":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\rxjs\\operators\\repeatWhen.js","dependencies":[{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\rxjs\\operators\\repeatWhen.js","mtime":499162500000},{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\r\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\r\nvar Subject_1 = require('../Subject');\r\nvar tryCatch_1 = require('../util/tryCatch');\r\nvar errorObject_1 = require('../util/errorObject');\r\nvar OuterSubscriber_1 = require('../OuterSubscriber');\r\nvar subscribeToResult_1 = require('../util/subscribeToResult');\r\n/**\r\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\r\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\r\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\r\n * this method will resubscribe to the source Observable.\r\n *\r\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\r\n *\r\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\r\n * which a user can `complete` or `error`, aborting the repetition.\r\n * @return {Observable} The source Observable modified with repeat logic.\r\n * @method repeatWhen\r\n * @owner Observable\r\n */\r\nfunction repeatWhen(notifier) {\r\n    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };\r\n}\r\nexports.repeatWhen = repeatWhen;\r\nvar RepeatWhenOperator = /*@__PURE__*/ (function () {\r\n    function RepeatWhenOperator(notifier) {\r\n        this.notifier = notifier;\r\n    }\r\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\r\n    };\r\n    return RepeatWhenOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar RepeatWhenSubscriber = /*@__PURE__*/ (function (_super) {\r\n    __extends(RepeatWhenSubscriber, _super);\r\n    function RepeatWhenSubscriber(destination, notifier, source) {\r\n        _super.call(this, destination);\r\n        this.notifier = notifier;\r\n        this.source = source;\r\n        this.sourceIsBeingSubscribedTo = true;\r\n    }\r\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        this.sourceIsBeingSubscribedTo = true;\r\n        this.source.subscribe(this);\r\n    };\r\n    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\r\n        if (this.sourceIsBeingSubscribedTo === false) {\r\n            return _super.prototype.complete.call(this);\r\n        }\r\n    };\r\n    RepeatWhenSubscriber.prototype.complete = function () {\r\n        this.sourceIsBeingSubscribedTo = false;\r\n        if (!this.isStopped) {\r\n            if (!this.retries) {\r\n                this.subscribeToRetries();\r\n            }\r\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\r\n                return _super.prototype.complete.call(this);\r\n            }\r\n            this._unsubscribeAndRecycle();\r\n            this.notifications.next();\r\n        }\r\n    };\r\n    /** @deprecated internal use only */ RepeatWhenSubscriber.prototype._unsubscribe = function () {\r\n        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;\r\n        if (notifications) {\r\n            notifications.unsubscribe();\r\n            this.notifications = null;\r\n        }\r\n        if (retriesSubscription) {\r\n            retriesSubscription.unsubscribe();\r\n            this.retriesSubscription = null;\r\n        }\r\n        this.retries = null;\r\n    };\r\n    /** @deprecated internal use only */ RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\r\n        var _a = this, notifications = _a.notifications, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\r\n        this.notifications = null;\r\n        this.retries = null;\r\n        this.retriesSubscription = null;\r\n        _super.prototype._unsubscribeAndRecycle.call(this);\r\n        this.notifications = notifications;\r\n        this.retries = retries;\r\n        this.retriesSubscription = retriesSubscription;\r\n        return this;\r\n    };\r\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\r\n        this.notifications = new Subject_1.Subject();\r\n        var retries = tryCatch_1.tryCatch(this.notifier)(this.notifications);\r\n        if (retries === errorObject_1.errorObject) {\r\n            return _super.prototype.complete.call(this);\r\n        }\r\n        this.retries = retries;\r\n        this.retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\r\n    };\r\n    return RepeatWhenSubscriber;\r\n}(OuterSubscriber_1.OuterSubscriber));\r\n",null]}
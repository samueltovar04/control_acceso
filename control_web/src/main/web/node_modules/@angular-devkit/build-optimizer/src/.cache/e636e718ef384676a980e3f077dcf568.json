{"remainingRequest":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\@agm\\core\\utils\\mvcarray-utils.js","dependencies":[{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\@agm\\core\\utils\\mvcarray-utils.js","mtime":499162500000},{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { fromEventPattern } from 'rxjs';\r\nexport function createMVCEventObservable(array) {\r\n    var eventNames = ['insert_at', 'remove_at', 'set_at'];\r\n    return fromEventPattern(function (handler) { return eventNames.map(function (evName) { return array.addListener(evName, function (index, previous) { return handler.apply(array, [{ 'newArr': array.getArray(), evName: evName, index: index, previous: previous }]); }); }); }, function (handler, evListeners) { return evListeners.forEach(function (evListener) { return evListener.remove(); }); });\r\n}\r\nvar MvcArrayMock = /*@__PURE__*/ (function () {\r\n    function MvcArrayMock() {\r\n        this.vals = [];\r\n        this.listeners = {\r\n            'remove_at': [],\r\n            'insert_at': [],\r\n            'set_at': [],\r\n        };\r\n    }\r\n    MvcArrayMock.prototype.clear = function () {\r\n        for (var i = this.vals.length - 1; i >= 0; i--) {\r\n            this.removeAt(i);\r\n        }\r\n    };\r\n    MvcArrayMock.prototype.getArray = function () {\r\n        return this.vals.slice();\r\n    };\r\n    MvcArrayMock.prototype.getAt = function (i) {\r\n        return this.vals[i];\r\n    };\r\n    MvcArrayMock.prototype.getLength = function () {\r\n        return this.vals.length;\r\n    };\r\n    MvcArrayMock.prototype.insertAt = function (i, elem) {\r\n        this.vals.splice(i, 0, elem);\r\n        this.listeners.insert_at.map(function (listener) { return listener(i); });\r\n    };\r\n    MvcArrayMock.prototype.pop = function () {\r\n        var _this = this;\r\n        var deleted = this.vals.pop();\r\n        this.listeners.remove_at.map(function (listener) { return listener(_this.vals.length, deleted); });\r\n        return deleted;\r\n    };\r\n    MvcArrayMock.prototype.push = function (elem) {\r\n        var _this = this;\r\n        this.vals.push(elem);\r\n        this.listeners.insert_at.map(function (listener) { return listener(_this.vals.length - 1); });\r\n        return this.vals.length;\r\n    };\r\n    MvcArrayMock.prototype.removeAt = function (i) {\r\n        var deleted = this.vals.splice(i, 1)[0];\r\n        this.listeners.remove_at.map(function (listener) { return listener(i, deleted); });\r\n        return deleted;\r\n    };\r\n    MvcArrayMock.prototype.setAt = function (i, elem) {\r\n        var deleted = this.vals[i];\r\n        this.vals[i] = elem;\r\n        this.listeners.set_at.map(function (listener) { return listener(i, deleted); });\r\n    };\r\n    MvcArrayMock.prototype.forEach = function (callback) {\r\n        this.vals.forEach(callback);\r\n    };\r\n    MvcArrayMock.prototype.addListener = function (eventName, handler) {\r\n        var listenerArr = this.listeners[eventName];\r\n        listenerArr.push(handler);\r\n        return {\r\n            remove: function () {\r\n                listenerArr.splice(listenerArr.indexOf(handler), 1);\r\n            }\r\n        };\r\n    };\r\n    return MvcArrayMock;\r\n}());\r\nexport { MvcArrayMock };\r\n//# sourceMappingURL=mvcarray-utils.js.map \r\n",null]}
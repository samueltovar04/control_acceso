{"remainingRequest":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\rxjs\\observable\\race.js","dependencies":[{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\rxjs\\observable\\race.js","mtime":499162500000},{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\r\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\r\nvar isArray_1 = require('../util/isArray');\r\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\r\nvar OuterSubscriber_1 = require('../OuterSubscriber');\r\nvar subscribeToResult_1 = require('../util/subscribeToResult');\r\nfunction race() {\r\n    var observables = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        observables[_i - 0] = arguments[_i];\r\n    }\r\n    // if the only argument is an array, it was most likely called with\r\n    // `race([obs1, obs2, ...])`\r\n    if (observables.length === 1) {\r\n        if (isArray_1.isArray(observables[0])) {\r\n            observables = observables[0];\r\n        }\r\n        else {\r\n            return observables[0];\r\n        }\r\n    }\r\n    return new ArrayObservable_1.ArrayObservable(observables).lift(new RaceOperator());\r\n}\r\nexports.race = race;\r\nvar RaceOperator = /*@__PURE__*/ (function () {\r\n    function RaceOperator() {\r\n    }\r\n    RaceOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new RaceSubscriber(subscriber));\r\n    };\r\n    return RaceOperator;\r\n}());\r\nexports.RaceOperator = RaceOperator;\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar RaceSubscriber = /*@__PURE__*/ (function (_super) {\r\n    __extends(RaceSubscriber, _super);\r\n    function RaceSubscriber(destination) {\r\n        _super.call(this, destination);\r\n        this.hasFirst = false;\r\n        this.observables = [];\r\n        this.subscriptions = [];\r\n    }\r\n    RaceSubscriber.prototype._next = function (observable) {\r\n        this.observables.push(observable);\r\n    };\r\n    RaceSubscriber.prototype._complete = function () {\r\n        var observables = this.observables;\r\n        var len = observables.length;\r\n        if (len === 0) {\r\n            this.destination.complete();\r\n        }\r\n        else {\r\n            for (var i = 0; i < len && !this.hasFirst; i++) {\r\n                var observable = observables[i];\r\n                var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);\r\n                if (this.subscriptions) {\r\n                    this.subscriptions.push(subscription);\r\n                }\r\n                this.add(subscription);\r\n            }\r\n            this.observables = null;\r\n        }\r\n    };\r\n    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        if (!this.hasFirst) {\r\n            this.hasFirst = true;\r\n            for (var i = 0; i < this.subscriptions.length; i++) {\r\n                if (i !== outerIndex) {\r\n                    var subscription = this.subscriptions[i];\r\n                    subscription.unsubscribe();\r\n                    this.remove(subscription);\r\n                }\r\n            }\r\n            this.subscriptions = null;\r\n        }\r\n        this.destination.next(innerValue);\r\n    };\r\n    return RaceSubscriber;\r\n}(OuterSubscriber_1.OuterSubscriber));\r\nexports.RaceSubscriber = RaceSubscriber;\r\n",null]}
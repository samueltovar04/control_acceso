{"remainingRequest":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\rxjs\\observable\\ArrayLikeObservable.js","dependencies":[{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\rxjs\\observable\\ArrayLikeObservable.js","mtime":499162500000},{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Lagash\\Projects\\control\\control_web\\src\\main\\web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\r\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\r\nvar Observable_1 = require('../Observable');\r\nvar ScalarObservable_1 = require('./ScalarObservable');\r\nvar EmptyObservable_1 = require('./EmptyObservable');\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nvar ArrayLikeObservable = /*@__PURE__*/ (function (_super) {\r\n    __extends(ArrayLikeObservable, _super);\r\n    function ArrayLikeObservable(arrayLike, scheduler) {\r\n        _super.call(this);\r\n        this.arrayLike = arrayLike;\r\n        this.scheduler = scheduler;\r\n        if (!scheduler && arrayLike.length === 1) {\r\n            this._isScalar = true;\r\n            this.value = arrayLike[0];\r\n        }\r\n    }\r\n    ArrayLikeObservable.create = function (arrayLike, scheduler) {\r\n        var length = arrayLike.length;\r\n        if (length === 0) {\r\n            return new EmptyObservable_1.EmptyObservable();\r\n        }\r\n        else if (length === 1) {\r\n            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);\r\n        }\r\n        else {\r\n            return new ArrayLikeObservable(arrayLike, scheduler);\r\n        }\r\n    };\r\n    ArrayLikeObservable.dispatch = function (state) {\r\n        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;\r\n        if (subscriber.closed) {\r\n            return;\r\n        }\r\n        if (index >= length) {\r\n            subscriber.complete();\r\n            return;\r\n        }\r\n        subscriber.next(arrayLike[index]);\r\n        state.index = index + 1;\r\n        this.schedule(state);\r\n    };\r\n    /** @deprecated internal use only */ ArrayLikeObservable.prototype._subscribe = function (subscriber) {\r\n        var index = 0;\r\n        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;\r\n        var length = arrayLike.length;\r\n        if (scheduler) {\r\n            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\r\n                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber\r\n            });\r\n        }\r\n        else {\r\n            for (var i = 0; i < length && !subscriber.closed; i++) {\r\n                subscriber.next(arrayLike[i]);\r\n            }\r\n            subscriber.complete();\r\n        }\r\n    };\r\n    return ArrayLikeObservable;\r\n}(Observable_1.Observable));\r\nexports.ArrayLikeObservable = ArrayLikeObservable;\r\n",null]}